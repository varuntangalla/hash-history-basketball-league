{"version":3,"sources":["components/Teams.js","components/Sidebar.js","components/Team.js"],"names":["Teams","state","teamNames","loading","getTeamNames","then","setState","this","props","location","match","className","title","list","pathname","path","url","render","id","params","teamId","team","style","width","name","established","manager","coach","to","Component","CustomLink","children","listStyleType","fontWeight","Sidebar","map","item","key","slug","search","toUpperCase","Team","fetchTeam","getTeam","nextProps"],"mappings":"+SAQqBA,E,4MACnBC,MAAQ,CACNC,UAAW,GACXC,SAAS,G,kEAEW,IAAD,OACnBC,cACGC,MAAK,SAACH,GACL,EAAKI,UAAS,iBAAO,CACnBH,SAAS,EACTD,qB,+BAIG,IAAD,EACuBK,KAAKN,MAA5BE,EADA,EACAA,QAASD,EADT,EACSA,UADT,EAEoBK,KAAKC,MAAzBC,EAFA,EAEAA,SAAUC,EAFV,EAEUA,MAElB,OACE,yBAAKC,UAAU,wBACb,kBAAC,IAAD,eACER,QAASA,EACTS,MAAM,QACNC,KAAMX,GACFK,KAAKC,SAGE,IAAZL,GAA2C,WAAtBM,EAASK,SAC3B,yBAAKH,UAAU,uBAAf,iBACA,KAEJ,kBAAC,IAAD,CAAOI,KAAI,UAAKL,EAAMM,IAAX,YAA0BC,OAAQ,gBAAGP,EAAH,EAAGA,MAAH,OAC3C,yBAAKC,UAAU,SACb,kBAAC,IAAD,CAAMO,GAAIR,EAAMS,OAAOC,SACpB,SAACC,GAAD,OAAmB,OAATA,EACP,kBAAC,IAAD,MACA,yBAAKC,MAAO,CAACC,MAAO,SAClB,kBAAC,IAAD,CAAUL,GAAIG,EAAKH,GAAIP,UAAU,WACjC,wBAAIA,UAAU,iBAAiBU,EAAKG,MACpC,wBAAIb,UAAU,iBACZ,0CAAe,6BAAMU,EAAKI,cAC1B,sCAAW,6BAAMJ,EAAKK,UACtB,oCAAS,6BAAML,EAAKM,SAEtB,kBAAC,IAAD,CACEhB,UAAU,kBACViB,GAAE,WAAMlB,EAAMS,OAAOC,SAClBC,EAAKG,KAHV,2B,GA5CeK,c,gCCRnC,8FAYA,SAASC,EAAT,GAAwC,IAAjBF,EAAgB,EAAhBA,GAAIG,EAAY,EAAZA,SACzB,OACE,kBAAC,IAAD,CACEhB,KAAMa,EAAGd,SACTiB,SAAU,gBAAGrB,EAAH,EAAGA,MAAH,OACR,wBAAIY,MAAO,CAACU,cAAe,OAAQC,WAAYvB,EAAQ,OAAS,WAC9D,kBAAC,IAAD,CAAMkB,GAAIA,GAAKG,OAOV,SAASG,EAAT,GAA4D,IAAzCtB,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,KAAMV,EAA2B,EAA3BA,QAASM,EAAkB,EAAlBA,SAAUC,EAAQ,EAARA,MAChE,OAAmB,IAAZP,EACH,kBAAC,IAAD,MACA,6BACE,wBAAIQ,UAAU,UAAUC,GACxB,wBAAID,UAAU,gBACXE,EAAKsB,KAAI,SAACC,GAAD,OACR,kBAACN,EAAD,CACEO,IAAKD,EACLR,GAAI,CACFd,SAAS,GAAD,OAAKJ,EAAMM,IAAX,YAAkBsB,IAAKF,IAC/BG,OAAQ9B,EAAS8B,SAEhBH,EAAKI,sB,kHChCDC,G,kNASjBxC,MAAO,CACHoB,KAAM,M,EAeVqB,UAAY,SAACxB,GACT,EAAKZ,UAAS,iBAAO,CACjBe,KAAM,SAGVsB,YAAQzB,GACHb,MAAK,SAACgB,GAAD,OAAU,EAAKf,UAAS,iBAAO,CAAEe,e,kEAhB3Cd,KAAKmC,UAAUnC,KAAKC,MAAMU,M,gDAIJ0B,GAClBrC,KAAKC,MAAMU,KAAO0B,EAAU1B,IAC7BX,KAAKmC,UAAUE,EAAU1B,M,+BAe5B,OAAOX,KAAKC,MAAMuB,SAASxB,KAAKN,MAAMoB,U,GApCZQ","file":"static/js/9.1ac36c9a.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Route, Link } from 'react-router-dom'\nimport Sidebar from './Sidebar'\nimport { getTeamNames } from '../api'\nimport TeamLogo from './TeamLogo'\nimport Team from './Team'\nimport Loading from './Loading'\n\nexport default class Teams extends Component {\n  state = {\n    teamNames: [],\n    loading: true,\n  }\n  componentDidMount () {\n    getTeamNames()\n      .then((teamNames) => {\n        this.setState(() => ({\n          loading: false,\n          teamNames,\n        }))\n      })\n  }\n  render () {\n    const { loading, teamNames } = this.state\n    const { location, match } = this.props\n\n    return (\n      <div className='container two-column'>\n        <Sidebar\n          loading={loading}\n          title='Teams'\n          list={teamNames}\n          {...this.props}\n        />\n\n        {loading === false && location.pathname === '/teams'\n          ? <div className='sidebar-instruction'>Select a Team</div>\n          : null}\n\n        <Route path={`${match.url}/:teamId`} render={({ match }) => (\n          <div className='panel'>\n            <Team id={match.params.teamId}>\n              {(team) => team === null\n                ? <Loading />\n                : <div style={{width: '100%'}}>\n                    <TeamLogo id={team.id} className='center' />\n                    <h1 className='medium-header'>{team.name}</h1>\n                    <ul className='info-list row'>\n                      <li>Established<div>{team.established}</div></li>\n                      <li>Manager<div>{team.manager}</div></li>\n                      <li>Coach<div>{team.coach}</div></li>\n                    </ul>\n                    <Link\n                      className='center btn-main'\n                      to={`/${match.params.teamId}`}>\n                        {team.name} Team Page\n                    </Link>\n                  </div>}\n            </Team>\n          </div>\n        )} />\n      </div>\n    )\n  }\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, Route } from 'react-router-dom'\nimport slug from 'slug'\nimport Loading from './Loading'\n\nSidebar.propTypes = {\n  title: PropTypes.string.isRequired,\n  list: PropTypes.array.isRequired,\n  loading: PropTypes.bool.isRequired,\n}\n\nfunction CustomLink ({ to, children }) {\n  return (\n    <Route\n      path={to.pathname}\n      children={({ match }) => (\n        <li style={{listStyleType: 'none', fontWeight: match ? 'bold' : 'normal'}}>\n          <Link to={to}>{children}</Link>\n        </li>\n      )}\n    />\n  )\n}\n\nexport default function Sidebar ({title, list, loading, location, match}) {\n  return loading === true\n    ? <Loading />\n    : <div>\n        <h3 className='header'>{title}</h3>\n        <ul className='sidebar-list'>\n          {list.map((item) => (\n            <CustomLink\n              key={item}\n              to={{\n                pathname: `${match.url}/${slug(item)}`,\n                search: location.search\n              }}>\n                {item.toUpperCase()}\n            </CustomLink>\n          ))}\n        </ul>\n      </div>\n}","import { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { getTeam } from '../api'\nimport { nullLiteral } from '@babel/types';\n\n\nexport default class Team extends Component { \n\n    static propTypes = {\n\n        id: PropTypes.string.isRequired,\n\n        children: PropTypes.func.isRequired,\n    }\n\n    state= {\n        team: null\n    }\n\n    componentDidMount() {\n\n        this.fetchTeam(this.props.id)\n\n    }\n\n    componentWillReceiveProps(nextProps){\n        if (this.props.id !== nextProps.id){\n           this.fetchTeam(nextProps.id) \n        }\n    }\n\n    fetchTeam = (id) => {\n        this.setState(() => ({\n            team: null\n        }))\n\n        getTeam(id)\n            .then((team) => this.setState(() => ({ team})))\n    }\n\n    render(){\n\n        return this.props.children(this.state.team)\n    }\n}"],"sourceRoot":""}